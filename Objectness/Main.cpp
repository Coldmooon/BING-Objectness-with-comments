// Objectness.cpp : Defines the entry point for the console application.
//

#include "stdafx.h"
#include "Objectness.h"
#include "ValStructVec.h"
#include "CmShow.h"

void RunObjectness(CStr &resName, double base, int W, int NSS, int numPerSz);

void illutrateLoG()
{
	for (float delta = 0.5f; delta < 1.1f; delta+=0.1f){
		Mat f = Objectness::aFilter(delta, 8);
		normalize(f, f, 0, 1, NORM_MINMAX);
		CmShow::showTinyMat(format("D=%g", delta), f);
	}
	waitKey(0);
}

int main(int argc, char* argv[])
{
    //DataSetVOC::importImageNetBenchMark();
    //DataSetVOC::cvt2OpenCVYml("D:/WkDir/DetectionProposals/VOC2007/Annotations/");
    //CStr wkDir = "D:/WkDir/DetectionProposals/VOC2007/Local/";
    //illutrateLoG();

	// 2: base for window size quantization
	// 8: feature dim
	// 2: NSS, size for non-maximal suppress
    RunObjectness("WinRecall.m", 2, 8, 2, 150);
    return 0;
}

// W: feature window size
void RunObjectness(CStr &resName, double base, int W, int NSS, int numPerSz)
{
	srand((unsigned int)time(NULL));
	DataSetVOC voc("/media/coldmoon/ExtremePro960G/Datasets/VOCdevkit/VOC2007/");
	voc.loadAnnotations();
	//voc2007.loadDataGenericOverCls();

	printf("Dataset:`%s' with %d training and %d testing\n", _S(voc.wkDir), voc.trainNum, voc.testNum);
	printf("%s Base = %g, W = %d, NSS = %d, perSz = %d\n", _S(resName), base, W, NSS, numPerSz);
	
	Objectness objNess(voc, base, W, NSS); // objNess 存储参数设定、数据库路径等“信息”。

	vector<vector<Vec4i> > boxesTests;
	//objNess.getObjBndBoxesForTests(boxesTests, 250);


	// Predict for a specific image.
	// -------------------------------------------------------------------
    cout << "Computing proposals for a specific image..." << endl;
    vector<vector<Vec4i> > boxes;
	vector<Vec4i> gtBoxes;
	vecI clsIdxofImg;
	string img_id = "007806";
	clsIdxofImg.clear();
	gtBoxes.resize(1);
	clsIdxofImg.resize(1);
	string img_name = voc.wkDir + "JPEGImages/" + img_id + ".jpg";
	voc.loadBBoxes(img_id, gtBoxes, clsIdxofImg);

    cv::Mat image = imread("/media/coldmoon/ExtremePro960G/Datasets/VOCdevkit/VOC2007/JPEGImages/007806.jpg");
    objNess.getObjBndBoxesForTest( image, boxes, numPerSz );
	bool ifdisplayed = objNess.illuSingle(image, boxes, gtBoxes);
	if (ifdisplayed) exit(0);
	// -------------------------------------------------------------------


	//If running this for the first time, set preloadModel to false.
	//Although it is not tested, ensure that the model is generated by
	//the getObjBndBoxesForTestsFast function and not
	//the getObjBndBoxesForTests function which uses colour information too.

	//To avoid running out of memory, you can load images only during
	//prediction by setting preloadImages to false.
	bool preloadModel = true, preloadImages = true;
	objNess.getObjBndBoxesForTestsFast(boxesTests, numPerSz, preloadModel, preloadImages);


	objNess.getRandomBoxes(boxesTests);
	objNess.evaluatePerClassRecall(boxesTests, resName, numPerSz);
	objNess.illuTestReults(boxesTests);
    //objNess.evaluatePAMI12();
    //objNess.evaluateIJCV13();
    
//    printf("The boxesTests'size is: %d \n", boxesTests.size());
//    printf("For each boxesTests, its size is: \n");
//    for(int i = 0; i < boxesTests.size(); ++i)
//        printf("boxesTests[%d]: %d \n",i,boxesTests[i].size());
    // }
    //
}
